{"version":3,"file":"static/js/719.66f1cca2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","redux/contatcs/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormWrap,\n  Field as Input,\n  ErrorMessage as Error,\n} from 'formik';\n\nexport const Form = styled(FormWrap)`\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  width: 400px;\n  margin: 0 auto;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Field = styled(Input)`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 16px;\n  margin-top: 10px;\n  box-sizing: border-box;\n`;\n\nexport const Label = styled.label`\n  font-size: 25px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nexport const ErrorMessage = styled(Error)``;\n\nexport const Button = styled.button`\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 20px;\n  font-size: 16px;\n  margin-top: 20px;\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, ErrorMessage, Label, Button } from './ContactForm.styled';\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contatcs/operations';\nimport { selectContact } from 'redux/contatcs/selectors';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required(),\n  number: Yup.number().required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contactsState = useSelector(selectContact);\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={(values, { resetForm }) => {\n        const chekContact = contactsState.find(\n          contactState => contactState.name === values.name\n        );\n        if (chekContact) {\n          alert(`${values.name} is alteady in contacts`);\n          resetForm();\n          return;\n        }\n        dispatch(addContact(values));\n        resetForm();\n      }}\n    >\n      <Form>\n        <Label htmlFor=\"name\">\n          Name\n          <Field\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <ErrorMessage component=\"div\" name=\"name\" />\n        </Label>\n        <Label htmlFor=\"number\">\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <ErrorMessage component=\"div\" name=\"name\" />\n        </Label>\n\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </Formik>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding-left: 0;\n`;\n\nexport const Item = styled.li`\n  font-size: 25px;\n  padding-bottom: 10px;\n  display: flex;\n\n  align-items: center;\n\n  svg {\n    padding-right: 5px;\n  }\n`;\n\nexport const Button = styled.button`\n  width: 25px;\n  height: 25px;\n  outline: none;\n  margin-left: 10px;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 0px;\n  background-color: inherit;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    padding: 0;\n  }\n`;\n","import { IoIosContact } from 'react-icons/io';\nimport React from 'react';\nimport { List, Item, Button } from './ContactList.styled';\nimport { AiFillDelete } from 'react-icons/ai';\n\nimport { deleteContact } from 'redux/contatcs/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { findFilteredContact } from 'redux/contatcs/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(findFilteredContact);\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <IoIosContact />\n          {name} : {number}\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            <AiFillDelete />\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  font-size: 16px;\n  margin-top: 10px;\n  box-sizing: border-box;\n`;\n","import React from 'react';\nimport { Label, Input } from './Filter.styled';\nimport { filterContacts } from 'redux/contatcs/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label htmlFor=\"text\">\n      Find contacts by name\n      <Input\n        name=\"text\"\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      ></Input>\n    </Label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contatcs/operations';\nimport { selectError, selectIsLoading } from 'redux/contatcs/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <section>\n        <ContactForm />\n        {isLoading && !error && <b>Loading...</b>}\n        <Filter />\n        <ContactList />\n      </section>\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContact = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterContact = state => state.filter;\n\nexport const findFilteredContact = createSelector(\n  [selectContact, selectFilterContact],\n  (contacts, filter) => {\n    if (filter) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n      );\n    }\n    return contacts;\n  }\n);\n"],"names":["Form","styled","FormWrap","_templateObject","_taggedTemplateLiteral","Field","Input","_templateObject2","Label","_templateObject3","ErrorMessage","Error","_templateObject4","Button","_templateObject5","schema","Yup","shape","name","required","number","ContactForm","dispatch","useDispatch","contactsState","useSelector","selectContact","_jsx","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","find","contactState","alert","concat","addContact","children","_jsxs","htmlFor","id","type","pattern","title","component","List","Item","ContactList","contacts","findFilteredContact","map","IoIosContact","onClick","deleteContact","AiFillDelete","Filter","onChange","e","filterContacts","target","value","Contacts","error","selectError","isLoading","selectIsLoading","useEffect","fetchContacts","state","createSelector","filter","contact","toLowerCase","includes","trim"],"sourceRoot":""}